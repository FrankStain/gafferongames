DONE

    Setup template for white paper.

TODO
    
    Now I need to do research.

    First thing I need is evidence of a problem.

    This can come from the hacker news thread, plus stack overflow questions "why can't i send udp packets" over the years.

    Example 1 with citation can be agar.io, with a quote from the author complaining about WebRTC being too complicated, and using web sockets, getting bad performance from this.

    Example 2 can be a discussion about UDP being "well known" to provide better performance in the game industry, and people searching for ways to send UDP packets from the browser. Or something better, if I can find it.

    Straw solution #1 should be web sockets:

        Web sockets are bad because they are built on TCP not UDP.

        Explain why this is bad (head of line blocking)

        Packet loss and latency still exist (most bad behavior is at the edges of the network, *citation*)

        Therefore TCP is not a good choice for time series data.

    Straw solution #2 should be SPDY:

        Use this to build evidence that UDP is actually making headroom in web world. 

        However, SPDY is based around channels of reliable-ordered data. Each channel still has head of line blocking. No support for unreliable-unordered data.

        So while this alleviates head of line blocking for unrelated content, but is not suitable for time series data, because head of line blocking still exists.

        (one option would be to set up 256 channels, and rotate the data across channels, so that a dropped packet would be unlikely to delay subsequence packets)

    Straw solution #3 should be WebRTC:

        NAT punch, stun. Focus on browser <-> browser communication and peer-to-peer. Data channel.

        Dedicated server trend in FPS (citation).

        NAT punch/stun are not required for dedicated servers.

        It's too much work to setup WebRTC and get it working with dedicated servers.

        Web games like agar.io are also dedicated server based games.

        Citation from hacker news article about complexity of WebRTC.

        "Too hard. Too complex".

    What are the three major concerns?        

        (This should be framed in terms of, so... why don't they just let you send UDP packets from a browser?, then turn around frame this in terms of 'what would a solution look like?')

        DDOS

            => DDOS attacks, spend packet to any address. To fix this solution should be: connection based.

        Encryption

            => UDP packets are not encrypted. MITM attacks. spoofing attacks, imitate another client or server.

        Authentication

            => UDP packets are not authenticated. How do you know the sender is a real client and not a bot or an attacker? Zombie clients. Taking up dedicated resources that you pay for etc.

    How the real solution works

        Frame this in terms of how it solves the primary concerns that would stop web browsers from letting you send UDP packets.

        Describe the protocol but in a high level.

        This is the real meat of the white paper.

    What are the three advantages?

        Simplicity.

            This solution is the simplest possible solution to the problem.

        Expandable.

            ^--- Once it becomes possible to send UDP packets, additional libraries can be built on this to provided higher level functionality, like reliabile/ordered for a subset of data. Packet fragmentation and reassembly, etc.

            With just this one foundation, everything else can be built that dedicated server-based games need in browsers.

        Authentication.

            The biggest advantage. Only clients granted connect tokens can actually connect to servers. Benefits against DDOS, zombie clients etc.

    