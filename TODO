TODO

    -----------------

    Integration Basics:

    Get RK4 working with the spring damper system.

    Output all results to text and csv files.

    Find a really good way to render high quality graphs.

    Graph the and make the article much better looking.

    Write a better conclusion basically saying, yeah, most physics engines just use semi-implicit euler. it's good enough for basic rigid body motion.

    -----------------

    Research shows that my integration with RK4 is actually for spring-damper system not even particularly accurate, and certainly, seems to not be any more accurate for spring damper, or undamped spring than the symplectic euler.

    -----------------

    Good constructive feedback on my article is here:

    https://www.reddit.com/r/programming/comments/15f4qc/on_using_rk4_over_euler_to_integrate_for_physics/

    The simple truth is I'm not actually qualified to discuss RK4.

    Also, I've made a mistake by adaptive RK4 (which is for integrating position from velocity), clumsily to handle both position and velocity at the same time.

    It seems that I actually get better results with the symplectic euler equation than RK4

    Have I completely assed up the RK4 explanation to the point where it is worthless, or is pushing people in the wrong direction?

    Almost certainly.

    What then is the best thing to do?

    The correct modification of the RK4 for a second order differential equation is:

    "Runge-Kutta- NystroÌˆm"

    ^--- This is a modification of the fourth-order Runge- Kutta method (RK4) for a second-order ordinary differential equation

    Is this the same as what I have manually implemented? If so, good news. If not, I should update to use it.

    -----------------

    This is an excellent description of a symplectic integrator.

    https://www.av8n.com/physics/symplectic-integrator.htm

    http://www.iact.ugr-csic.es/personal/julyan_cartwright/papers/rkpaper/node9.html

    "IT is now well known that numerical methods such as the ordinary Runge--Kutta methods are not ideal for integrating Hamiltonian systems, because Hamiltonian systems  are not generic in the set of all dynamical systems, in the sense that they are not structurally stable against non-Hamiltonian perturbations. The numerical approximation to a Hamiltonian system obtained from an ordinary numerical method does introduce a non-Hamiltonian perturbation. This means that a Hamiltonian system integrated using an ordinary numerical method will become a dissipative (non-Hamiltonian) system, with completely different long-term behaviour, since dissipative systems have attractors and Hamiltonian systems do not."

    ^--- Note. Written in 1995. FFS...

    -----------------

    Khan academy:

    https://www.youtube.com/watch?v=b-OSyxOpxKc

    More stuff:

    https://www.youtube.com/watch?v=1YZnic1Ug9g

    -------------

    Second order ODE predator/prey:

    https://www.youtube.com/watch?v=0LzDiScAcJI

    -----------------

    This code shows how to implement RK4 for a second order ODE:

    http://math.stackexchange.com/questions/721076/help-with-using-the-runge-kutta-4th-order-method-on-a-system-of-2-first-order-od

    I should be able to compare this with what I have done, to make sure it is the same. Looking at it, I think it is.

    -----------------

    Another second order ODE RK4 that I can compare against:

    http://www.engr.colostate.edu/~thompson/hPage/CourseMat/Tutorials/CompMethods/Rungekutta.pdf

    -----------------

    Wut

    https://www.youtube.com/watch?v=45qcpa0FUZo

    -----------------

    More: 

    http://physicsforgames.blogspot.com/2010/02/kinematic-integration.html

    http://box2d.org/downloads/

    https://www.reddit.com/r/gamedev/comments/4gu0ke/integrators_in_physics_engines_rk4_improved_euler/

    -----------------

    Excellent stuff here:

    https://www.reddit.com/r/gamedev/comments/4gu0ke/integrators_in_physics_engines_rk4_improved_euler/

    -----------------

    Get nice syntax highlighting working:

    https://gohugo.io/extras/highlighting/

    Definely want to do this on page generation rather than javascript, so it works well inside an RSS feed.

    -----------------

    Port across the existing "Networked Physics" article series.

    Check them in both the browser and in the RSS reader. Do videos show up in RSS readers? Kindof a bummer if they don't!

    -----------------

    Find way to speed up video upload

    Either a) get smart and delta it with git for the upload step, or separate out the upload of the videos from the rest of the content.

    Videos don't change often so no point waiting 30 seconds for them to upload everytime I make a small change.

    -----------------

    Finish writing "Client Server Connection"

    -----------------

    Port across the existing "Game Networking" series.

    -----------------

    Port across the "Virtual Go" article series.

    -----------------

    Research a good way to get a sitemap and discoverability on gafferongames.com, eg. menus, local search, sidebar with sitemap... something equivalent to what I currently have on gafferongames.com is essential for discoverability and driving people towards the patreon for articles they want to read.

    People fundamentally need to be see the structure of articles planned, and want the next one in the series... this is key. Cannot lose this.

    https://npf.io/2014/08/making-it-a-series/

    -----------------

    This could be a convenient option for hosting the static website content, but probably not the videos:

    https://www.aerobatic.com

    Not sure it really beats my nginx option though.

    Auth looks nice though for supporter only articles:

    https://www.aerobatic.com/docs/http-basic-authentication#custom-auth

    -----------------