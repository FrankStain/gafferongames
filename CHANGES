CHANGES

Monday April 24th
=================

    Added timestamp to logging.
        
    To really detect sneaky downloads, I need to wait 10 seconds and query if any other writes have occurred. Testing small writes at the start gives false positives.

TODO

    I'd like to write a script that prints out the list of people who are currently banned.

    Would be cool if my webserver.go could detect itself its source code (mapped) being modified and quit, then I could have a loop in a script where it keeps building itself, running again, etc. This would really speed up iteration.

    Similarly, if the nginx could detect modifications to the (mapped) /etc/nginx/nginx.conf, then I could shut it down and relaunch whenever the configuration is changed.

    Both of these modifications would make iteration much faster, and would reduce the amount of time I need to spend bringing the whole server down and bringing it back up just for small code changes.

    It would mean that in the common case, as soon as I pull new content from git, the webside, videos, nginx config and webserver.go are all updated.

    This would be *perfect* for my iteration. The biggest slowdown I have right now is shutting down all the containers and relaunching them when nginx config or webserver.go changes. Especially webserver.go right now.

    This would *REVOLUTIONIZE* my iteration with docker.

    ---------

    I'm still getting funny stuff, like when I reload 

    Is my code in webserver.go properly counting bytes written? I mean, I don't know what I could be doing wrong, but it doesn't seem to be accurate.

    *OR* web browers are sometimes redundantly reading the video stream multiple times? Seems unlikely...

    Here is an example of the clear doubling up:

        [2017-04-24 17:57:28] 47.153.184.*: ./videos/deterministic_lockstep.mp4 | 8191508 | 8191498/8191498 | 1.00
        [2017-04-24 17:57:28] 47.153.184.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 31521509 | 23330001/23330001 | 1.00
        [2017-04-24 17:57:28] 47.153.184.*: ./videos/deterministic_lockstep_desync.mp4 | 39845399 | 8323890/8323890 | 1.00
        [2017-04-24 17:57:28] 47.153.184.*: ./videos/deterministic_lockstep_tcp_100ms_1pc.mp4 | 47582134 | 7736735/7736735 | 1.00
        [2017-04-24 17:57:28] 47.153.184.*: ./videos/deterministic_lockstep_tcp_250ms_5pc.mp4 | 53282620 | 5700486/5700486 | 1.00
        [2017-04-24 17:57:28] 47.153.184.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 76546259 | 23263639/23330001 | 2.00
        [2017-04-24 17:57:28] 47.153.184.*: ./videos/deterministic_lockstep_tcp_250ms_5pc.mp4 | 82230020 | 5683761/5700486 | 2.00
        [2017-04-24 17:59:18] 47.153.184.*: ./videos/snapshot_interpolation_10pps_hermite_interpolation.mp4 | 93921865 | 11691835/11691835 | 1.00
        [2017-04-24 17:59:18] 47.153.184.*: ./videos/snapshot_interpolation_10pps_linear_interpolation.mp4 | 105134758 | 11212893/11212893 | 1.00
        [2017-04-24 17:59:18] 47.153.184.*: ./videos/snapshot_interpolation_60pps_jitter.mp4 | 108630944 | 3496186/3496186 | 1.00
        [2017-04-24 17:59:18] 47.153.184.*: ./videos/snapshot_interpolation_10pps_no_interpolation.mp4 | 115671060 | 7040116/7040116 | 1.00
        [2017-04-24 17:59:18] 47.153.184.*: ./videos/snapshot_interpolation_10pps_extrapolation.mp4 | 127792214 | 12121154/12121154 | 1.00
        [2017-04-24 17:59:18] 47.153.184.*: ./videos/snapshot_interpolation_10pps_hermite_interpolation.mp4 | 139449807 | 11657593/11691835 | 2.00
        [2017-04-24 17:59:18] 47.153.184.*: ./videos/snapshot_interpolation_10pps_linear_interpolation.mp4 | 150634014 | 11184207/11212893 | 2.00
        [2017-04-24 17:59:18] 47.153.184.*: ./videos/snapshot_interpolation_60pps_jitter.mp4 | 154110555 | 3476541/3496186 | 1.99
        [2017-04-24 17:59:18] 47.153.184.*: ./videos/snapshot_interpolation_10pps_no_interpolation.mp4 | 161129566 | 7019011/7040116 | 2.00
        [2017-04-24 17:59:18] 47.153.184.*: ./videos/snapshot_interpolation_10pps_extrapolation.mp4 | 173210638 | 12081072/12121154 | 2.00

    I don't really know what to make of this.

    Also, some users come in like this:

        [2017-04-24 18:00:32] 216.98.56.*: ./videos/deterministic_lockstep_tcp_100ms_1pc.mp4 | 75511565 | 3343995/7736735 | 1.43
        [2017-04-24 18:00:33] 216.98.56.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 93194986 | 17683421/23330001 | 2.57
        [2017-04-24 18:00:35] 216.98.56.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 109629396 | 16434410/23330001 | 3.27
        [2017-04-24 18:00:38] 216.98.56.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 124673153 | 15043757/23330001 | 3.92
        [2017-04-24 18:00:42] 216.98.56.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 138451894 | 13778741/23330001 | 4.51
        [2017-04-24 18:00:45] 216.98.56.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 151040026 | 12588132/23330001 | 5.05
        [2017-04-24 18:00:49] 216.98.56.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 162349222 | 11309196/23330001 | 5.53
        [2017-04-24 18:00:53] 216.98.56.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 172475066 | 10125844/23330001 | 5.97
        [2017-04-24 18:00:57] 216.98.56.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 181468070 | 8993004/23330001 | 6.35
        [2017-04-24 18:01:01] 216.98.56.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 189283161 | 7815091/23330001 | 6.69
        [2017-04-24 18:01:05] 216.98.56.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 195903987 | 6620826/23330001 | 6.97
        [2017-04-24 18:01:18] 216.98.56.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 201193252 | 5289265/23330001 | 7.20
        [2017-04-24 18:01:21] 216.98.56.*: ./videos/deterministic_lockstep_udp_2sec_25pc.mp4 | 205423404 | 4230152/23330001 | 7.38

    And it seems they keep downloading the video over and over. Why? This is dumb.

    This is a very big file though, a 23mb video. Perhaps it's streaming and doesn't have caching. Who knows?

    Perhaps print out the start offset of the read, in addition to the amount of bytes read?

    One thing I know for sure, if somebody is coming in and doing this when looking at an actual video, I really can't distinguish that from an attack.

    I checked the nginx logs, and the requests from the client seem legitimate. I mean, I guess a client can request as many partial downloads as they want, forever. It's stupid, but if a user abuses this (or if the web client is dumb enough to 10X download something that should only need to be downloaded 1X, fine... I guess I have to ban that.)

    Keep the bans light (1 day).

    Reduce the ban check time to 1hr as well to reduce potential harm for somebody browsing all articles on my website.
    
    ---------

    Still need to setup redis so it has a persistent database, eg. bans and stats persist across restarts.
    
    
Sunday April 23rd
=================

    Setup crontab to start gafferongames docker compose automatically on reboot

    Testing in now by rebooting linode.

    Ahhhhh... the sudo is making it fail. I can't make a sudo run like that. Edit root crontab instead.

    Testing... Yes. This works fine!

    Setting up wordpress now. A docker volume persists the db. This is how it works.

    After much fucking around, I had to manually override the wp-config.php to get it to work.

    However, it's not running the setup process, or at least, I don't know how to log in.

    Seems like I have to expose the port so I can setup w. apache directly, then once it's setup, I can do the redirect.

    Fuck the other option, it seems that wordpress doesn't get setup that way. Shit software... =p

    Fuck it. It's not worth the time fucking around with this.

    netcode.io redirect is working again.

    I need a better workflow for upgrading and changing website content while dockerized nginx is running.

    How can I create a volume for the docker files, and then make changes to this volume from outside the container while it's running?

    It must be possible. I need to do this to make it possible to upload website changes without bringing the whole website down!

    Done. Mapped videos and website public to the docker as read only, so the files can be modified without restarting the container.

    Next I need to make redis persist with a volume. I don't want to lose all the redis stuff when the container shuts down (eg. bans)

    If I want that to go away, I can remove the volume manually.

    Ahahah. I caught the hacker, and then he started spinning up instances on subnets, eg. x.y.z.*

    To fix this, I wildcarded the last number in the IP address so they're all considered together.

    This is probably overly aggressive, but might send the right message. Eat shit and die. He'll run his scripts tonight, and it'll pick him up.

    I probably want to relax this, because if people are browsing from a corporate network at the same time, they'll probably get nailed.

    But again, they'll probably get nailed if they are browsing that way with the IP check (with NAT)

    So really, is there any way to solve this without nailing some people. Probably not. Fuck it. Just keep the bans temp.

    On this note, the ban on total amount downloaded is probably a bad idea (both on single IP with NAT, and especially with wildcard).

    Think this through, after seeing how the hacker handles this.

    As far as I can tell, the hacker has slowed down rate of download, and is splitting it across multiple IPs.

    I'll catch him, but be super aggressive, persist the keys longer, so if he downloads the same file more than 10 times in 24 hours, he gets the ban.

    Right now it's 10 times in 1 hr, which may fail to pick him up if he goes real slow. I want to catch him if he goes slow though.

    Seems like the hacker is also slicing the downloads, eg. downloading 512kb at a time. I won't pick him up quickly this way.

    However, he can't do any real damage this way either...

    Some logic I could run is to add another key, and if he hasn't hit this file in the last 10 second or so, but it is > 100 bytes read, treat it as a whole read.

    This is aggressive, but it would catch him doing salami reads like this.

    It's annoying and hard to read seeing the old values. Would be much better if I logged at the end of the function with completely updated values.
